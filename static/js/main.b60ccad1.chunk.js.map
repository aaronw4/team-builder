{"version":3,"sources":["Form.js","EditForm.js","App.js","serviceWorker.js","index.js"],"names":["TeamForm","props","useState","name","email","role","id","newMember","setNewMember","addList","e","target","value","className","onSubmit","preventDefault","addMember","htmlFor","type","onChange","EditTeamForm","member","newInfo","setNewInfo","console","log","newObj2","edit","onClick","cancel","App","team","setTeam","setMember","setEdit","selectEdit","button","Number","arr","filter","i","map","data","info","newArray","update","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b60ccad1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst TeamForm = props => {\r\n\r\n    const [newMember, setNewMember] = useState({name:'', email:'', role:'', id:null});\r\n\r\n    const addList = e => {\r\n        setNewMember({...newMember, [e.target.name]: e.target.value })\r\n    };\r\n\r\n    const hitSubmit = e => {\r\n        e.preventDefault();\r\n        props.addMember(newMember);\r\n        setNewMember({name:'', email:'', role:'', id:null});\r\n    };\r\n\r\n    return (\r\n        <div className='formCont'>\r\n        <h2 className='title'>Add New Member Form</h2>\r\n        <form onSubmit={hitSubmit} className='form'>\r\n            <label htmlFor='name'>Name: </label>\r\n            <input\r\n                id='name'\r\n                value={newMember.name}\r\n                name='name'\r\n                type='text'\r\n                onChange={addList}\r\n                className='input'\r\n            />\r\n            <br></br>\r\n            <label htmlFor='email'>email: &nbsp;</label>\r\n            <input\r\n                id='email'\r\n                value={newMember.email}\r\n                name='email'\r\n                type='text'\r\n                onChange={addList}\r\n                className='input'\r\n            />\r\n            <br></br>\r\n            <label htmlFor='role'>role: &nbsp;&nbsp;&nbsp;</label>\r\n            <input\r\n                id='role'\r\n                value={newMember.role}\r\n                name='role'\r\n                type='text'\r\n                onChange={addList}\r\n                className='input'\r\n            />\r\n            <br></br>\r\n            <button className='button' type='submit'>Add Member</button>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TeamForm;","import React, { useState } from \"react\";\r\n\r\nconst EditTeamForm = props => {\r\n\r\n    const [newInfo, setNewInfo] = useState(props.member);\r\n    \r\n\r\n    const addList = e => {\r\n        setNewInfo({...newInfo, [e.target.name]: e.target.value \r\n        })\r\n    };\r\n\r\n    console.log(props.member)\r\n    const hitSubmit = e => {\r\n        let newObj = newInfo;\r\n        let newObj2 = {...newObj, id: props.member[0].id};\r\n        e.preventDefault();\r\n        props.edit(newObj2);\r\n    };\r\n\r\n    return (\r\n        <div className='editCont'>\r\n        <h2 className='title'>Edit Member Form</h2>\r\n        <form onSubmit={hitSubmit} className='edit'>\r\n            <label htmlFor='name'>Name: </label>\r\n            <input\r\n                id='name'\r\n                value={newInfo.name}\r\n                name='name'\r\n                type='text'\r\n                onChange={addList}\r\n                className='input'\r\n            />\r\n            <br></br>\r\n            <label htmlFor='email'>email: &nbsp;</label>\r\n            <input\r\n                id='email'\r\n                value={newInfo.email}\r\n                name='email'\r\n                type='text'\r\n                onChange={addList}                \r\n                className='input'\r\n            />\r\n            <br></br>\r\n            <label htmlFor='role'>role: &nbsp;&nbsp;&nbsp;</label>\r\n            <input\r\n                id='role'\r\n                value={newInfo.role}\r\n                name='role'\r\n                type='text'\r\n                onChange={addList}\r\n                className='input'\r\n            />\r\n            <br></br>\r\n            <button className='button' type='submit'>Submit Changes</button>\r\n            <button className='button' onClick={props.cancel}>Cancel</button>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditTeamForm;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TeamForm from './Form';\r\nimport EditTeamForm from './EditForm';\r\n\r\nfunction App() {\r\n  const [team, setTeam] = useState([\r\n    {\r\n      name: 'Luke Skywalker',\r\n      email: 'iAmAJedi@gmail.com',\r\n      role: 'backend engineer',\r\n      id: 0\r\n    },\r\n    {\r\n      name: 'Obi-Wan Kenobi',\r\n      email: 'useTheForceLuke@gmail.com',\r\n      role: \"frontend engineer\",\r\n      id: 1\r\n    },\r\n    {\r\n      name: 'Yoda',\r\n      email: 'doOrDoNot@gmail.com',\r\n      role: 'designer',\r\n      id: 2\r\n    }\r\n  ])\r\n\r\n  const addMember = info => {\r\n    const newMember = {\r\n      name: info.name,\r\n      email: info.email,\r\n      role: info.role,\r\n      id: team.length\r\n    };\r\n    setTeam([...team, newMember]);\r\n    console.log(team)\r\n  };\r\n\r\n  const [member, setMember] = useState([]);\r\n  const [edit, setEdit] = useState(false);\r\n\r\n  const selectEdit = (button) => {\r\n    setEdit(true);\r\n    let id = Number(button.target.value);\r\n    const arr = team.filter(i => {\r\n      return(i.id === id)\r\n    });\r\n    setMember(arr);\r\n  };\r\n\r\n  const editMember = info => {\r\n    console.log(info);\r\n    let newArray = team.filter(i => i.id !== info.id)\r\n    console.log(newArray);\r\n    const update = {\r\n      name: info.name,\r\n      email: info.email,\r\n      role: info.role,\r\n      id: team.length\r\n    };\r\n    setTeam([...newArray, update]);\r\n    setEdit(false);    \r\n  }\r\n\r\n  const cancelEdit = () => {\r\n    setEdit(false);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"App\"> \r\n      <div className='teamList'>\r\n        <h1 className='team'> Team </h1>\r\n        <div className='cards'>\r\n          {team.map(data => {\r\n            return(\r\n            <div className='memberInfo'>\r\n              <p>{data.name}</p>\r\n              <p>{data.email}</p>\r\n              <p>{data.role}</p>\r\n              <button value={data.id} onClick={selectEdit}>Edit</button>\r\n            </div>\r\n          )})}\r\n          </div>\r\n        </div>\r\n      {edit === true ? <EditTeamForm cancel={cancelEdit} member={member} edit={editMember}/> : <TeamForm addMember={addMember}/>}\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}